import "tesst2"
from "tesst2" import fn2 as fn22

var n = 5.5 + tesst2.n2 + tesst2.fn2(2)
@n += 2.25
var o = #{ one: 1.0, two: 2.0 }
var t = "jooby"
@t[1:3] = "bugger"
@t[1:5][1:3] = "jiga"
@t += "y"
@t[2] = t[-1]
@t[2] += t[-1]
var g = (v + 1 for v in [0, 1, 2])
var l = [v - 1 for v in g]
@l *= 2
@l[2] = 9
@l[1:5][1:3] = [9]
@l[1:5][1:3] = [3, 6, 9]
const l2 = [v - 1 for v in g]
@g = (v + 1 for v in [0, 1, 2])
const d = {v - 1: v + 1 for v in g}
const d2 = {k + 1: v - 1 for k, v in d}
@g = (v + 1 for v in [0, 1, 2])
var s = {v - 1 for v in g}
const s2 = {v + 1 for v in s}
@s = {c + c for c in "jooby"}
@s, t = t, s
@l = s, t
@s, t = l
@l[1] = s, t

@print("waiting")
@await the_passage_of_time(1)

var a: int = 1
const b = [1, 2]
const c = {1, 2}
@a = b.size >= 1 ? 2 : 1
@b[0] = -2
++b[0]

function fn(b: int): int {
	return a + b
}

function yielder(b: int): int {
	++b
	yield a + b
	@b += 2
	yield a + b
}
@l = [v - 1 for v in yielder(1)]
do {
	if var b = 1, a > 1 {
		@b = fn(b)
		break
	} else if var b = 1, a == 1 {
		continue
	} else if a < 1 {
		@a += 1
	} else {
		const b: dict = {}
	}
} while a < 1
for var a = 1, var b = 1, --a, @fn(a); @fn(a), a < 1; ++a, @fn(a) {
	@b -= fn(b)
}
for ;; {
	switch const b = 1, a - 1 {
		// Although "case" statements have no braces, they create contexts.
		case 1:
			@a = 1
			fallthrough

			function fn(b: int): int {
				return a + b
			}
		case 0:
			@a = 3
			break, continue

			function fn(b: int): int {
				return a + b
			}
		default:
			@a = 2
			break, break

			function fn(b: int): int {
				return a + b
			}
	}
}
for var a = 0;; ++a {
	for ; a < 2; {
		if a == 0 {
			break, continue
		} else if a == 1 {
			break, break
		}
	}
}
while const b = 1, a < 3 {
	@a += b
}
@o.one /= o.two
@d[a - 1] *= b[a - 2]
@print(fn(2), fn22(2), b, d, l, n, o, s, t)
