var a: int = 1
var b = [1, 2]
var b = {1, 2}
var b = {1: 2, 2: 1}
@a = b.size >= 1 ? 2 : 1

function fn(b: int): int {
	return a + b
}

do {
	if var b = 1, a > 1 {
		@b = fn(b)
		break
	} else if var b = 1, a == 1 {
		continue
	} else if a < 1 {
		@a += 1
	} else {
		var b: dict = {}
	}
} while a < 1
for var a = 1, var b = 1, --a, @fn(a); @fn(a), a < 1; --a, @fn(a) {
	@b -= fn(b)
}
for ;; {
	switch var b = 1, a - 1 {
		case 1: // TODO:  consider having case statements create contexts as if they were blocks.
			@a = 2
			break
		case 0:
			@a = 3
			break, continue
		default:
			@a = 2
			break, break
	}
}
while var a = 1, a == 1 {
	++a
}
@a.b /= b.a
@a[b] *= b[a]
@print(fn(2))
