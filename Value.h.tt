<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".inl" #>
// This file is auto-generated; do not edit.
#pragma once
<#
string[] lines = File.ReadAllLines("Value.txt");
string[][] parts = lines.Select((s) => s.Split('|').Select((t) => t.Trim()).ToArray()).ToArray();
var q = from a in parts
		let s = a[0]
		where s[0] == '@'
		select "class " + s.Substring(1) + ";";
string typeDeclarations = string.Join(Environment.NewLine, q);
#>
<#= typeDeclarations #>
<#
q = from a in parts
	let s = a[0]
	let t = s[0] == '@' ? "std::shared_ptr<" + s.Substring(1) + ">" : s
	select t;
string typeNames = string.Join(", ", q);
#>
using Value = std::variant<nullptr_t, <#= typeNames #>>;
<#
q = from a in parts
	where a.Last().Any()
	select "class " + a[0].Substring(1) + " : public " + a.Last() + " {};";
string typeDefinitions = string.Join(Environment.NewLine, q);
#>
<#= typeDefinitions #>
bool AsBoolean(Value const& value);
void PrintValue(Value const& value);
